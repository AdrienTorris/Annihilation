using System;

namespace Vulkan
{
    public unsafe delegate Result CreateInstanceDelegate(ref InstanceCreateInfo createInfo, AllocationCallbacks* Allocator, out Instance instance);
    public unsafe delegate void DestroyInstanceDelegate(Instance instance, AllocationCallbacks* Allocator);
    public unsafe delegate Result EnumeratePhysicalDevicesDelegate(Instance instance, ref uint physicalDeviceCount, PhysicalDevice* physicalDevices);
    public unsafe delegate void GetPhysicalDeviceFeaturesDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceFeatures features);
    public unsafe delegate void GetPhysicalDeviceFormatPropertiesDelegate(PhysicalDevice physicalDevice, Format format, out FormatProperties formatProperties);
    public unsafe delegate Result GetPhysicalDeviceImageFormatPropertiesDelegate(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, out ImageFormatProperties imageFormatProperties);
    public unsafe delegate void GetPhysicalDevicePropertiesDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceProperties properties);
    public unsafe delegate void GetPhysicalDeviceQueueFamilyPropertiesDelegate(PhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, QueueFamilyProperties* queueFamilyProperties);
    public unsafe delegate void GetPhysicalDeviceMemoryPropertiesDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceMemoryProperties memoryProperties);
    public unsafe delegate IntPtr GetInstanceProcAddrDelegate(Instance instance, byte* name);
    public unsafe delegate IntPtr GetDeviceProcAddrDelegate(Device device, byte* name);
    public unsafe delegate Result CreateDeviceDelegate(PhysicalDevice physicalDevice, ref DeviceCreateInfo createInfo, AllocationCallbacks* Allocator, out Device device);
    public unsafe delegate void DestroyDeviceDelegate(Device device, AllocationCallbacks* Allocator);
    public unsafe delegate Result EnumerateInstanceExtensionPropertiesDelegate(byte* layerName, ref uint propertyCount, ExtensionProperties* properties);
    public unsafe delegate Result EnumerateDeviceExtensionPropertiesDelegate(PhysicalDevice physicalDevice, byte* layerName, ref uint propertyCount, ExtensionProperties* properties);
    public unsafe delegate Result EnumerateInstanceLayerPropertiesDelegate(ref uint propertyCount, LayerProperties* properties);
    public unsafe delegate Result EnumerateDeviceLayerPropertiesDelegate(PhysicalDevice physicalDevice, ref uint propertyCount, LayerProperties* properties);
    public unsafe delegate void GetDeviceQueueDelegate(Device device, uint queueFamilyIndex, uint queueIndex, out Queue queue);
    public unsafe delegate Result QueueSubmitDelegate(Queue queue, uint submitCount, SubmitInfo* submits, Fence fence);
    public unsafe delegate Result QueueWaitIdleDelegate(Queue queue);
    public unsafe delegate Result DeviceWaitIdleDelegate(Device device);
    public unsafe delegate Result AllocateMemoryDelegate(Device device, ref MemoryAllocateInfo AllocateInfo, AllocationCallbacks* Allocator, out DeviceMemory memory);
    public unsafe delegate void FreeMemoryDelegate(Device device, DeviceMemory memory, AllocationCallbacks* Allocator);
    public unsafe delegate Result MapMemoryDelegate(Device device, DeviceMemory memory, DeviceSize offset, DeviceSize size, MemoryMapFlags flags, void** data);
    public unsafe delegate void UnmapMemoryDelegate(Device device, DeviceMemory memory);
    public unsafe delegate Result FlushMappedMemoryRangesDelegate(Device device, uint memoryRangeCount, MappedMemoryRange* memoryRanges);
    public unsafe delegate Result InvalidateMappedMemoryRangesDelegate(Device device, uint memoryRangeCount, MappedMemoryRange* memoryRanges);
    public unsafe delegate void GetDeviceMemoryCommitmentDelegate(Device device, DeviceMemory memory, out DeviceSize committedMemoryInBytes);
    public unsafe delegate Result BindBufferMemoryDelegate(Device device, Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset);
    public unsafe delegate Result BindImageMemoryDelegate(Device device, Image image, DeviceMemory memory, DeviceSize memoryOffset);
    public unsafe delegate void GetBufferMemoryRequirementsDelegate(Device device, Buffer buffer, out ImageMemoryRequirementsInfo2 memoryRequirements);
    public unsafe delegate void GetImageMemoryRequirementsDelegate(Device device, Image image, out MemoryRequirements memoryRequirements);
    public unsafe delegate void GetImageSparseMemoryRequirementsDelegate(Device device, Image image, out uint sparseMemoryRequirementCount, SparseImageMemoryRequirements* sparseMemoryRequirements);
    public unsafe delegate void GetPhysicalDeviceSparseImageFormatPropertiesDelegate(PhysicalDevice physicalDevice, Format format, ImageType type, SampleCountFlags samples, ImageUsageFlags usage, ImageTiling tiling, out uint propertyCount, SparseImageFormatProperties* properties);
    public unsafe delegate Result QueueBindSparseDelegate(Queue queue, uint bindInfoCount, ref BindSparseInfo bindInfo, Fence fence);
    public unsafe delegate Result CreateFenceDelegate(Device device, ref FenceCreateInfo createInfo, AllocationCallbacks* Allocator, out Fence fence);
    public unsafe delegate void DestroyFenceDelegate(Device device, Fence fence, AllocationCallbacks* Allocator);
    public unsafe delegate Result ResetFencesDelegate(Device device, uint fenceCount, Fence* fences);
    public unsafe delegate Result GetFenceStatusDelegate(Device device, Fence fence);
    public unsafe delegate Result WaitForFencesDelegate(Device device, uint fenceCount, Fence* fences, Bool32 waitAll, ulong timeout);
    public unsafe delegate Result CreateSemaphoreDelegate(Device device, ref SemaphoreCreateInfo createInfo, AllocationCallbacks* Allocator, out Semaphore semaphore);
    public unsafe delegate void DestroySemaphoreDelegate(Device device, Semaphore semaphore, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateEventDelegate(Device device, ref EventCreateInfo createInfo, AllocationCallbacks* Allocator, out Event evnt);
    public unsafe delegate void DestroyEventDelegate(Device device, Event evt, AllocationCallbacks* Allocator);
    public unsafe delegate Result GetEventStatusDelegate(Device device, Event evt);
    public unsafe delegate Result SetEventDelegate(Device device, Event evt);
    public unsafe delegate Result ResetEventDelegate(Device device, Event evt);
    public unsafe delegate Result CreateQueryPoolDelegate(Device device, ref QueryPoolCreateInfo createInfo, AllocationCallbacks* Allocator, out QueryPool queryPool);
    public unsafe delegate void DestroyQueryPoolDelegate(Device device, QueryPool queryPool, AllocationCallbacks* Allocator);
    public unsafe delegate Result GetQueryPoolResultsDelegate(Device device, QueryPool queryPool, uint firstQuery, uint queryCount, Size dataSize, void* data, DeviceSize stride, QueryResultFlags flags);
    public unsafe delegate Result CreateBufferDelegate(Device device, ref BufferCreateInfo createInfo, AllocationCallbacks* Allocator, out Buffer buffer);
    public unsafe delegate void DestroyBufferDelegate(Device device, Buffer buffer, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateBufferViewDelegate(Device device, ref BufferViewCreateInfo createInfo, AllocationCallbacks* Allocator, out BufferView view);
    public unsafe delegate void DestroyBufferViewDelegate(Device device, BufferView bufferView, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateImageDelegate(Device device, ref ImageCreateInfo createInfo, AllocationCallbacks* Allocator, out Image image);
    public unsafe delegate void DestroyImageDelegate(Device device, Image image, AllocationCallbacks* Allocator);
    public unsafe delegate void GetImageSubresourceLayoutDelegate(Device device, Image image, ref ImageSubresource subresource, out SubresourceLayout layout);
    public unsafe delegate Result CreateImageViewDelegate(Device device, ref ImageViewCreateInfo createInfo, AllocationCallbacks* Allocator, out ImageView view);
    public unsafe delegate void DestroyImageViewDelegate(Device device, ImageView imageView, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateShaderModuleDelegate(Device device, ref ShaderModuleCreateInfo createInfo, AllocationCallbacks* Allocator, out ShaderModule shaderModule);
    public unsafe delegate void DestroyShaderModuleDelegate(Device device, ShaderModule shaderModule, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreatePipelineCacheDelegate(Device device, ref PipelineCacheCreateInfo createInfo, AllocationCallbacks* Allocator, out PipelineCache pipelineCache);
    public unsafe delegate void DestroyPipelineCacheDelegate(Device device, PipelineCache pipelineCache, AllocationCallbacks* Allocator);
    public unsafe delegate Result GetPipelineCacheDataDelegate(Device device, PipelineCache pipelineCache, out Size dataSize, void* data);
    public unsafe delegate Result MergePipelineCachesDelegate(Device device, PipelineCache dstCache, uint srcCacheCount, ref PipelineCache* srcCaches);
    public unsafe delegate Result CreateGraphicsPipelinesDelegate(Device device, PipelineCache pipelineCache, uint createInfoCount, GraphicsPipelineCreateInfo* createInfos, AllocationCallbacks* Allocator, Pipeline* pipelines);
    public unsafe delegate Result CreateComputePipelinesDelegate(Device device, PipelineCache pipelineCache, uint createInfoCount, ComputePipelineCreateInfo* createInfos, AllocationCallbacks* Allocator, Pipeline* pipelines);
    public unsafe delegate void DestroyPipelineDelegate(Device device, Pipeline pipeline, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreatePipelineLayoutDelegate(Device device, ref PipelineLayoutCreateInfo createInfo, AllocationCallbacks* Allocator, out PipelineLayout pipelineLayout);
    public unsafe delegate void DestroyPipelineLayoutDelegate(Device device, PipelineLayout pipelineLayout, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateSamplerDelegate(Device device, ref SamplerCreateInfo createInfo, AllocationCallbacks* Allocator, out Sampler sampler);
    public unsafe delegate void DestroySamplerDelegate(Device device, Sampler sampler, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateDescriptorSetLayoutDelegate(Device device, ref DescriptorSetLayoutCreateInfo createInfo, AllocationCallbacks* Allocator, out DescriptorSetLayout setLayout);
    public unsafe delegate void DestroyDescriptorSetLayoutDelegate(Device device, DescriptorSetLayout descriptorSetLayout, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateDescriptorPoolDelegate(Device device, ref DescriptorPoolCreateInfo createInfo, AllocationCallbacks* Allocator, out DescriptorPool descriptorPool);
    public unsafe delegate void DestroyDescriptorPoolDelegate(Device device, DescriptorPool descriptorPool, AllocationCallbacks* Allocator);
    public unsafe delegate Result ResetDescriptorPoolDelegate(Device device, DescriptorPool descriptorPool, DescriptorPoolResetFlags flags);
    public unsafe delegate Result AllocateDescriptorSetsDelegate(Device device, ref DescriptorSetAllocateInfo AllocateInfo, DescriptorSet* descriptorSets);
    public unsafe delegate Result FreeDescriptorSetsDelegate(Device device, DescriptorPool descriptorPool, uint descriptorSetCount, DescriptorSet* descriptorSets);
    public unsafe delegate void UpdateDescriptorSetsDelegate(Device device, uint descriptorWriteCount, WriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, CopyDescriptorSet* descriptorCopies);
    public unsafe delegate Result CreateFramebufferDelegate(Device device, ref FramebufferCreateInfo createInfo, AllocationCallbacks* Allocator, out Framebuffer framebuffer);
    public unsafe delegate void DestroyFramebufferDelegate(Device device, Framebuffer framebuffer, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateRenderPassDelegate(Device device, ref RenderPassCreateInfo createInfo, AllocationCallbacks* Allocator, out RenderPass renderPass);
    public unsafe delegate void DestroyRenderPassDelegate(Device device, RenderPass renderPass, AllocationCallbacks* Allocator);
    public unsafe delegate void GetRenderAreaGranularityDelegate(Device device, RenderPass renderPass, out Extent2D granularity);
    public unsafe delegate Result CreateCommandPoolDelegate(Device device, ref CommandPoolCreateInfo createInfo, AllocationCallbacks* Allocator, out CommandPool commandPool);
    public unsafe delegate void DestroyCommandPoolDelegate(Device device, CommandPool commandPool, AllocationCallbacks* Allocator);
    public unsafe delegate Result ResetCommandPoolDelegate(Device device, CommandPool commandPool, CommandPoolResetFlags flags);
    public unsafe delegate Result AllocateCommandBuffersDelegate(Device device, ref CommandBufferAllocateInfo AllocateInfo, CommandBuffer* commandBuffers);
    public unsafe delegate void FreeCommandBuffersDelegate(Device device, CommandPool commandPool, uint commandBufferCount, CommandBuffer* commandBuffers);
    public unsafe delegate Result BeginCommandBufferDelegate(CommandBuffer commandBuffer, ref CommandBufferBeginInfo beginInfo);
    public unsafe delegate Result EndCommandBufferDelegate(CommandBuffer commandBuffer);
    public unsafe delegate Result ResetCommandBufferDelegate(CommandBuffer commandBuffer, CommandBufferResetFlags flags);
    public unsafe delegate void CmdBindPipelineDelegate(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline);
    public unsafe delegate void CmdSetViewportDelegate(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Viewport* viewports);
    public unsafe delegate void CmdSetScissorDelegate(CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Rect2D* scissors);
    public unsafe delegate void CmdSetLineWidthDelegate(CommandBuffer commandBuffer, float lineWidth);
    public unsafe delegate void CmdSetDepthBiasDelegate(CommandBuffer commandBuffer, float depthBiasrefantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
    public unsafe delegate void CmdSetBlendConstantsDelegate(CommandBuffer commandBuffer, float* blendConstants);
    public unsafe delegate void CmdSetDepthBoundsDelegate(CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
    public unsafe delegate void CmdSetStencilCompareMaskDelegate(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint compareMask);
    public unsafe delegate void CmdSetStencilWriteMaskDelegate(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint writeMask);
    public unsafe delegate void CmdSetStencilReferenceDelegate(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint reference);
    public unsafe delegate void CmdBindDescriptorSetsDelegate(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint firstSet, uint descriptorSetCount, DescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets);
    public unsafe delegate void CmdBindIndexBufferDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, IndexType indexType);
    public unsafe delegate void CmdBindVertexBuffersDelegate(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* buffers, DeviceSize* offsets);
    public unsafe delegate void CmdDrawDelegate(CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
    public unsafe delegate void CmdDrawIndexedDelegate(CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
    public unsafe delegate void CmdDrawIndirectDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
    public unsafe delegate void CmdDrawIndexedIndirectDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
    public unsafe delegate void CmdDispatchDelegate(CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
    public unsafe delegate void CmdDispatchIndirectDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset);
    public unsafe delegate void CmdCopyBufferDelegate(CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint regionCount, BufferCopy* regions);
    public unsafe delegate void CmdCopyImageDelegate(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageCopy* regions);
    public unsafe delegate void CmdBlitImageDelegate(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageBlit* regions, Filter filter);
    public unsafe delegate void CmdCopyBufferToImageDelegate(CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint regionCount, BufferImageCopy* regions);
    public unsafe delegate void CmdCopyImageToBufferDelegate(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint regionCount, BufferImageCopy* regions);
    public unsafe delegate void CmdUpdateBufferDelegate(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, void* data);
    public unsafe delegate void CmdFillBufferDelegate(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, uint data);
    public unsafe delegate void CmdClearColorImageDelegate(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ref ClearColorValue color, uint rangeCount, ImageSubresourceRange* ranges);
    public unsafe delegate void CmdClearDepthStencilImageDelegate(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ref ClearDepthStencilValue depthStencil, uint rangeCount, ImageSubresourceRange* ranges);
    public unsafe delegate void CmdClearAttachmentsDelegate(CommandBuffer commandBuffer, uint attachmentCount, ClearAttachment* attachments, uint rectCount, ClearRect* rects);
    public unsafe delegate void CmdResolveImageDelegate(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageResolve* regions);
    public unsafe delegate void CmdSetEventDelegate(CommandBuffer commandBuffer, Event evt, PipelineStageFlags stageMask);
    public unsafe delegate void CmdResetEventDelegate(CommandBuffer commandBuffer, Event evt, PipelineStageFlags stageMask);
    public unsafe delegate void CmdWaitEventsDelegate(CommandBuffer commandBuffer, uint eventCount, Event* events, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, uint memoryBarrierCount, MemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* imageMemoryBarriers);
    public unsafe delegate void CmdPipelineBarrierDelegate(CommandBuffer commandBuffer, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, uint memoryBarrierCount, MemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* imageMemoryBarriers);
    public unsafe delegate void CmdBeginQueryDelegate(CommandBuffer commandBuffer, QueryPool queryPool, uint query, QueryControlFlags flags);
    public unsafe delegate void CmdEndQueryDelegate(CommandBuffer commandBuffer, QueryPool queryPool, uint query);
    public unsafe delegate void CmdResetQueryPoolDelegate(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount);
    public unsafe delegate void CmdWriteTimestampDelegate(CommandBuffer commandBuffer, PipelineStageFlags pipelineStage, QueryPool queryPool, uint query);
    public unsafe delegate void CmdCopyQueryPoolResultsDelegate(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags);
    public unsafe delegate void CmdPushConstantsDelegate(CommandBuffer commandBuffer, PipelineLayout layout, ShaderStageFlags stageFlags, uint offset, uint size, void* values);
    public unsafe delegate void CmdBeginRenderPassDelegate(CommandBuffer commandBuffer, ref RenderPassBeginInfo renderPassBegin, SubpassContents contents);
    public unsafe delegate void CmdNextSubpassDelegate(CommandBuffer commandBuffer, SubpassContents contents);
    public unsafe delegate void CmdEndRenderPassDelegate(CommandBuffer commandBuffer);
    public unsafe delegate void CmdExecuteCommandsDelegate(CommandBuffer commandBuffer, uint commandBufferCount, CommandBuffer* commandBuffers);

    // Khronos
    public unsafe delegate void DestroySurfaceKHRDelegate(Instance instance, Surface surface, AllocationCallbacks* Allocator);
    public unsafe delegate Result GetPhysicalDeviceSurfaceSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex, Surface surface, out Bool32 supported);
    public unsafe delegate Result GetPhysicalDeviceSurfaceCapabilitiesKHRDelegate(PhysicalDevice physicalDevice, Surface surface, out SurfaceCapabilities surfaceCapabilities);
    public unsafe delegate Result GetPhysicalDeviceSurfaceFormatsKHRDelegate(PhysicalDevice physicalDevice, Surface surface, ref uint surfaceFormatCount, SurfaceFormat* surfaceFormats);
    public unsafe delegate Result GetPhysicalDeviceSurfacePresentModesKHRDelegate(PhysicalDevice physicalDevice, Surface surface, ref uint presentModeCount, PresentMode* presentModes);
    public unsafe delegate Result CreateSwapchainKHRDelegate(Device device, ref SwapchainCreateInfo createInfo, AllocationCallbacks* Allocator, out Swapchain swapchain);
    public unsafe delegate void DestroySwapchainKHRDelegate(Device device, Swapchain swapchain, AllocationCallbacks* Allocator);
    public unsafe delegate Result GetSwapchainImagesKHRDelegate(Device device, Swapchain swapchain, ref uint swapchainImageCount, Image* swapchainImages);
    public unsafe delegate Result AcquireNextImageKHRDelegate(Device device, Swapchain swapchain, ulong timeout, Semaphore semaphore, Fence fence, out uint imageIndex);
    public unsafe delegate Result QueuePresentKHRDelegate(Queue queue, ref PresentInfo presentInfo);
    public unsafe delegate Result GetPhysicalDeviceDisplayPropertiesKHRDelegate(PhysicalDevice physicalDevice, ref uint propertyCount, DisplayProperties* properties);
    public unsafe delegate Result GetPhysicalDeviceDisplayPlanePropertiesKHRDelegate(PhysicalDevice physicalDevice, ref uint propertyCount, DisplayPlaneProperties* properties);
    public unsafe delegate Result GetDisplayPlaneSupportedDisplaysKHRDelegate(PhysicalDevice physicalDevice, uint planeIndex, ref uint displayCount, Display* displays);
    public unsafe delegate Result GetDisplayModePropertiesKHRDelegate(PhysicalDevice physicalDevice, Display display, ref uint propertyCount, DisplayModeProperties* properties);
    public unsafe delegate Result CreateDisplayModeKHRDelegate(PhysicalDevice physicalDevice, Display display, ref DisplayModeCreateInfo createInfo, AllocationCallbacks* Allocator, out DisplayMode mode);
    public unsafe delegate Result GetDisplayPlaneCapabilitiesKHRDelegate(PhysicalDevice physicalDevice, DisplayMode mode, uint planeIndex, out DisplayPlaneCapabilities capabilities);
    public unsafe delegate Result CreateDisplayPlaneSurfaceKHRDelegate(Instance instance, ref DisplaySurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Result CreateSharedSwapchainsKHRDelegate(Device device, uint swapchainCount, SwapchainCreateInfo* createInfos, AllocationCallbacks* Allocator, Swapchain* swapchains);
    public unsafe delegate Result CreateXlibSurfaceKHRDelegate(Instance instance, ref XlibSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Bool32 GetPhysicalDeviceXlibPresentationSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr dpy, IntPtr visualID);
    public unsafe delegate Result CreateXcbSurfaceKHRDelegate(Instance instance, ref XcbSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Bool32 GetPhysicalDeviceXcbPresentationSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr connection, IntPtr visualId);
    public unsafe delegate Result CreateWaylandSurfaceKHRDelegate(Instance instance, ref WaylandSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Bool32 GetPhysicalDeviceWaylandPresentationSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr display);
    public unsafe delegate Result CreateMirSurfaceKHRDelegate(Instance instance, ref MirSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Bool32 GetPhysicalDeviceMirPresentationSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr connection);
    public unsafe delegate Result CreateAndroidSurfaceKHRDelegate(Instance instance, ref AndroidSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Result CreateWin32SurfaceKHRDelegate(Instance instance, ref Win32SurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Bool32 GetPhysicalDeviceWin32PresentationSupportKHRDelegate(PhysicalDevice physicalDevice, uint queueFamilyIndex);
    public unsafe delegate void GetPhysicalDeviceFeatures2KHRDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceFeatures2 features);
    public unsafe delegate void GetPhysicalDeviceProperties2KHRDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceProperties2 properties);
    public unsafe delegate void GetPhysicalDeviceFormatProperties2KHRDelegate(PhysicalDevice physicalDevice, Format format, out FormatProperties2 formatProperties);
    public unsafe delegate Result GetPhysicalDeviceImageFormatProperties2KHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceImageFormatInfo2 imageFormatInfo, out ImageFormatProperties2 imageFormatProperties);
    public unsafe delegate void GetPhysicalDeviceQueueFamilyProperties2KHRDelegate(PhysicalDevice physicalDevice, out uint queueFamilyPropertyCount, QueueFamilyProperties2* queueFamilyProperties);
    public unsafe delegate void GetPhysicalDeviceMemoryProperties2KHRDelegate(PhysicalDevice physicalDevice, out PhysicalDeviceMemoryProperties2 memoryProperties);
    public unsafe delegate void GetPhysicalDeviceSparseImageFormatProperties2KHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceSparseImageFormatInfo2 formatInfo, out uint propertyCount, SparseImageFormatProperties2* properties);
    public unsafe delegate void TrimCommandPoolKHRDelegate(Device device, CommandPool commandPool, CommandPoolTrimFlags flags);
    public unsafe delegate void GetPhysicalDeviceExternalBufferPropertiesKHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceExternalBufferInfo externalBufferInfo, out ExternalBufferProperties externalBufferProperties);
    public unsafe delegate Result GetMemoryWin32HandleKHRDelegate(Device device, ref MemoryGetWin32HandleInfo getWin32HandleInfo, IntPtr handle);
    public unsafe delegate Result GetMemoryWin32HandlePropertiesKHRDelegate(Device device, ExternalMemoryHandleTypeFlags handleType, IntPtr handle, out MemoryWin32HandleProperties memoryWin32HandleProperties);
    public unsafe delegate Result GetMemoryFdKHRDelegate(Device device, ref MemoryGetFdInfo getFdInfo, out int fd);
    public unsafe delegate Result GetMemoryFdPropertiesKHRDelegate(Device device, ExternalMemoryHandleTypeFlags handleType, int fd, out MemoryFdProperties pMemoryFdProperties);
    public unsafe delegate void GetPhysicalDeviceExternalSemaphorePropertiesKHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out ExternalSemaphoreProperties externalSemaphoreProperties);
    public unsafe delegate Result ImportSemaphoreWin32HandleKHRDelegate(Device device, ref ImportSemaphoreWin32HandleInfo importSemaphoreWin32HandleInfo);
    public unsafe delegate Result GetSemaphoreWin32HandleKHRDelegate(Device device, ref SemaphoreGetWin32HandleInfo getWin32HandleInfo, IntPtr handle);
    public unsafe delegate Result ImportSemaphoreFdKHRDelegate(Device device, ref ImportSemaphoreFdInfo importSemaphoreFdInfo);
    public unsafe delegate Result GetSemaphoreFdKHRDelegate(Device device, ref SemaphoreGetFdInfo getFdInfo, out int fd);
    public unsafe delegate void CmdPushDescriptorSetKHRDelegate(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint set, uint descriptorWriteCount, WriteDescriptorSet* descriptorWrites);
    public unsafe delegate Result CreateDescriptorUpdateTemplateKHRDelegate(Device device, ref DescriptorUpdateTemplateCreateInfo createInfo, AllocationCallbacks* Allocator, out DescriptorUpdateTemplate descriptorUpdateTemplate);
    public unsafe delegate void DestroyDescriptorUpdateTemplateKHRDelegate(Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, AllocationCallbacks* Allocator);
    public unsafe delegate void UpdateDescriptorSetWithTemplateKHRDelegate(Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, void* data);
    public unsafe delegate void CmdPushDescriptorSetWithTemplateKHRDelegate(CommandBuffer commandBuffer, DescriptorUpdateTemplate descriptorUpdateTemplate, PipelineLayout layout, uint set, void* data);
    public unsafe delegate Result GetSwapchainStatusKHRDelegate(Device device, Swapchain swapchain);
    public unsafe delegate void GetPhysicalDeviceExternalFencePropertiesKHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceExternalFenceInfo externalFenceInfo, out ExternalFenceProperties externalFenceProperties);
    public unsafe delegate Result ImportFenceWin32HandleKHRDelegate(Device device, ref ImportFenceWin32HandleInfo importFenceWin32HandleInfo);
    public unsafe delegate Result GetFenceWin32HandleKHRDelegate(Device device, ref FenceGetWin32HandleInfo getWin32HandleInfo, IntPtr pHandle);
    public unsafe delegate Result ImportFenceFdKHRDelegate(Device device, ref ImportFenceFdInfo importFenceFdInfo);
    public unsafe delegate Result GetFenceFdKHRDelegate(Device device, ref FenceGetFdInfo getFdInfo, out int fd);
    public unsafe delegate Result GetPhysicalDeviceSurfaceCapabilities2KHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceSurfaceInfo2 surfaceInfo, out SurfaceCapabilities2 surfaceCapabilities);
    public unsafe delegate Result GetPhysicalDeviceSurfaceFormats2KHRDelegate(PhysicalDevice physicalDevice, ref PhysicalDeviceSurfaceInfo2 surfaceInfo, out uint surfaceFormatCount, SurfaceFormat2* surfaceFormats);
    public unsafe delegate void GetImageMemoryRequirements2KHRDelegate(Device device, ref ImageMemoryRequirementsInfo2 info, out MemoryRequirements2 memoryRequirements);
    public unsafe delegate void GetBufferMemoryRequirements2KHRDelegate(Device device, ref BufferMemoryRequirementsInfo2 info, out MemoryRequirements2 memoryRequirements);
    public unsafe delegate void GetImageSparseMemoryRequirements2KHRDelegate(Device device, ref ImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, SparseImageMemoryRequirements2* sparseMemoryRequirements);

    // Khronos X
    public unsafe delegate void GetDeviceGroupPeerMemoryFeaturesKHXDelegate(Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out PeerMemoryFeatureFlags peerMemoryFeatures);
    public unsafe delegate Result BindBufferMemory2KHXDelegate(Device device, uint bindInfoCount, BindBufferMemoryInfo* bindInfos);
    public unsafe delegate Result BindImageMemory2KHXDelegate(Device device, uint bindInfoCount, BindImageMemoryInfo* bindInfos);
    public unsafe delegate void CmdSetDeviceMaskKHXDelegate(CommandBuffer commandBuffer, uint deviceMask);
    public unsafe delegate Result GetDeviceGroupPresentCapabilitiesKHXDelegate(Device device, out DeviceGroupPresentCapabilities deviceGroupPresentCapabilities);
    public unsafe delegate Result GetDeviceGroupSurfacePresentModesKHXDelegate(Device device, Surface surface, out DeviceGroupPresentModeFlags modes);
    public unsafe delegate Result AcquireNextImage2KHXDelegate(Device device, ref AcquireNextImageInfo acquireInfo, out uint imageIndex);
    public unsafe delegate void CmdDispatchBaseKHXDelegate(CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
    public unsafe delegate Result GetPhysicalDevicePresentRectanglesKHXDelegate(PhysicalDevice physicalDevice, Surface surface, ref uint rectCount, Rect2D* rects);
    public unsafe delegate Result EnumeratePhysicalDeviceGroupsKHXDelegate(Instance instance, ref uint physicalDeviceGroupCount, PhysicalDeviceGroupProperties* physicalDeviceGroupProperties);

    // Multi-vendor
    public unsafe delegate Bool32 DebugReportCallbackEXTDelegate(DebugReportFlags flags, DebugReportObjectType objectType, ulong objectHandle, Size location, int messageCode, byte* layerPrefix, byte* message, IntPtr userData);
    public unsafe delegate Result CreateDebugReportCallbackEXTDelegate(Instance instance, ref DebugReportCallbackCreateInfo createInfo, AllocationCallbacks* Allocator, out DebugReportCallback callback);
    public unsafe delegate void DestroyDebugReportCallbackEXTDelegate(Instance instance, DebugReportCallback callback, AllocationCallbacks* Allocator);
    public unsafe delegate void DebugReportMessageEXTDelegate(Instance instance, DebugReportFlags flags, DebugReportObjectType objectType, ulong obj, Size location, int messageCode, byte* layerPrefix, byte* message);
    public unsafe delegate Result DebugMarkerSetObjectTagEXTDelegate(Device device, ref DebugMarkerObjectTagInfo tagInfo);
    public unsafe delegate Result DebugMarkerSetObjectNameEXTDelegate(Device device, ref DebugMarkerObjectNameInfo nameInfo);
    public unsafe delegate void CmdDebugMarkerBeginEXTDelegate(CommandBuffer commandBuffer, ref DebugMarkerMarkerInfo markerInfo);
    public unsafe delegate void CmdDebugMarkerEndEXTDelegate(CommandBuffer commandBuffer);
    public unsafe delegate void CmdDebugMarkerInsertEXTDelegate(CommandBuffer commandBuffer, ref DebugMarkerMarkerInfo markerInfo);
    public unsafe delegate Result ReleaseDisplayEXTDelegate(PhysicalDevice physicalDevice, Display display);
    public unsafe delegate Result AcquireXlibDisplayEXTDelegate(PhysicalDevice physicalDevice, IntPtr dpy, Display display);
    public unsafe delegate Result GetRandROutputDisplayEXTDelegate(PhysicalDevice physicalDevice, IntPtr dpy, IntPtr rrOutput, out Display display);
    public unsafe delegate Result GetPhysicalDeviceSurfaceCapabilities2EXTDelegate(PhysicalDevice physicalDevice, Surface surface, out SurfaceCapabilities2EXT surfaceCapabilities);
    public unsafe delegate Result DisplayPowerControlEXTDelegate(Device device, Display display, ref DisplayPowerInfo displayPowerInfo);
    public unsafe delegate Result RegisterDeviceEventEXTDelegate(Device device, ref DeviceEventInfo deviceEventInfo, AllocationCallbacks* Allocator, out Fence fence);
    public unsafe delegate Result RegisterDisplayEventEXTDelegate(Device device, Display display, ref DisplayEventInfo displayEventInfo, AllocationCallbacks* Allocator, out Fence fence);
    public unsafe delegate Result GetSwapchainCounterEXTDelegate(Device device, Swapchain swapchain, SurfaceCounterFlags counter, out ulong counterValue);
    public unsafe delegate void CmdSetDiscardRectangleEXTDelegate(CommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, Rect2D* discardRectangles);
    public unsafe delegate void SetHdrMetadataEXTDelegate(Device device, uint swapchainCount, Swapchain* swapchains, HdrMetadata* metadata);

    // AMD
    public unsafe delegate void CmdDrawIndirectCountAMDDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
    public unsafe delegate void CmdDrawIndexedIndirectCountAMDDelegate(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    // Nvidia
    public unsafe delegate Result GetPhysicalDeviceExternalImageFormatPropertiesNVDelegate(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ExternalMemoryHandleTypeFlagsNV ExternalHandleType, out ExternalImageFormatPropertiesNV externalImageFormatProperties);
    public unsafe delegate Result GetMemoryWin32HandleNVDelegate(Device device, DeviceMemory memory, ExternalMemoryHandleTypeFlagsNV handleType, IntPtr handle);
    public unsafe delegate void CmdSetViewportWScalingNVDelegate(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ViewportWScaling* viewportWScalings);

    // Nvidia X
    public unsafe delegate void CmdProcessCommandsNVXDelegate(CommandBuffer commandBuffer, ref CmdProcessCommandsInfo processCommandsInfo);
    public unsafe delegate void CmdReserveSpaceForCommandsNVXDelegate(CommandBuffer commandBuffer, ref CmdReserveSpaceForCommandsInfo reserveSpaceInfo);
    public unsafe delegate Result CreateIndirectCommandsLayoutNVXDelegate(Device device, ref IndirectCommandsLayoutCreateInfo createInfo, AllocationCallbacks* Allocator, out IndirectCommandsLayout indirectCommandsLayout);
    public unsafe delegate void DestroyIndirectCommandsLayoutNVXDelegate(Device device, IndirectCommandsLayout indirectCommandsLayout, AllocationCallbacks* Allocator);
    public unsafe delegate Result CreateObjectTableNVXDelegate(Device device, ref ObjectTableCreateInfo createInfo, AllocationCallbacks* Allocator, out ObjectTable objectTable);
    public unsafe delegate void DestroyObjectTableNVXDelegate(Device device, ObjectTable objectTable, AllocationCallbacks* Allocator);
    public unsafe delegate Result RegisterObjectsNVXDelegate(Device device, ObjectTable objectTable, uint objectCount, ref ObjectTableEntry* objectTableEntries, uint* objectIndices);
    public unsafe delegate Result UnregisterObjectsNVXDelegate(Device device, ObjectTable objectTable, uint objectCount, ObjectEntryType* objectEntryTypes, uint* objectIndices);
    public unsafe delegate void GetPhysicalDeviceGeneratedCommandsPropertiesNVXDelegate(PhysicalDevice physicalDevice, out DeviceGeneratedCommandsFeatures features, out DeviceGeneratedCommandsLimits limits);

    // Nintendo
    public unsafe delegate Result CreateViSurfaceNNDelegate(Instance instance, ref ViSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);

    // Google
    public unsafe delegate Result GetRefreshCycleDurationGOOGLEDelegate(Device device, Swapchain swapchain, ref RefreshCycleDuration displayTimingProperties);
    public unsafe delegate Result GetPastPresentationTimingGOOGLEDelegate(Device device, Swapchain swapchain, ref uint presentationTimingCount, PastPresentationTiming* presentationTimings);

    // Molten
    public unsafe delegate Result CreateIOSSurfaceMDelegate(Instance instance, ref IOSSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
    public unsafe delegate Result CreateMacOSSurfaceMDelegate(Instance instance, ref MacOSSurfaceCreateInfo createInfo, AllocationCallbacks* Allocator, out Surface surface);
}