using System;

namespace Vulkan
{
    public unsafe delegate VkResult VkCreateInstance(ref VkInstanceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkInstance instance);
    public unsafe delegate void VkDestroyInstance(VkInstance instance, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkEnumeratePhysicalDevices(VkInstance instance, ref uint physicalDeviceCount, VkPhysicalDevice* physicalDevices);
    public unsafe delegate void VkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features);
    public unsafe delegate void VkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties);
    public unsafe delegate VkResult VkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties);
    public unsafe delegate void VkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties);
    public unsafe delegate void VkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint queueFamilyPropertyCount, VkQueueFamilyProperties* queueFamilyProperties);
    public unsafe delegate void VkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties);
    public unsafe delegate IntPtr VkGetInstanceProcAddr(VkInstance instance, byte* name);
    public unsafe delegate IntPtr VkGetDeviceProcAddr(VkDevice device, byte* name);
    public unsafe delegate VkResult VkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDevice device);
    public unsafe delegate void VkDestroyDevice(VkDevice device, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkEnumerateInstanceExtensionProperties(byte* layerName, ref uint propertyCount, VkExtensionProperties* properties);
    public unsafe delegate VkResult VkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, byte* layerName, ref uint propertyCount, VkExtensionProperties* properties);
    public unsafe delegate VkResult VkEnumerateInstanceLayerProperties(ref uint propertyCount, VkLayerProperties* properties);
    public unsafe delegate VkResult VkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint propertyCount, VkLayerProperties* properties);
    public unsafe delegate void VkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue);
    public unsafe delegate VkResult VkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* submits, VkFence fence);
    public unsafe delegate VkResult VkQueueWaitIdle(VkQueue queue);
    public unsafe delegate VkResult VkDeviceWaitIdle(VkDevice device);
    public unsafe delegate VkResult VkVkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo VkAllocateInfo, VkAllocationCallbacks* VkAllocator, out VkDeviceMemory memory);
    public unsafe delegate void VkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** data);
    public unsafe delegate void VkUnmapMemory(VkDevice device, VkDeviceMemory memory);
    public unsafe delegate VkResult VkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges);
    public unsafe delegate VkResult VkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges);
    public unsafe delegate void VkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out VkDeviceSize committedMemoryInBytes);
    public unsafe delegate VkResult VkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
    public unsafe delegate VkResult VkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
    public unsafe delegate void VkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkImageMemoryRequirementsInfo2 memoryRequirements);
    public unsafe delegate void VkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements);
    public unsafe delegate void VkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, out uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements* sparseMemoryRequirements);
    public unsafe delegate void VkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, out uint propertyCount, VkSparseImageFormatProperties* properties);
    public unsafe delegate VkResult VkQueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo bindInfo, VkFence fence);
    public unsafe delegate VkResult VkCreateFence(VkDevice device, ref VkFenceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkFence fence);
    public unsafe delegate void VkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkResetFences(VkDevice device, uint fenceCount, VkFence* fences);
    public unsafe delegate VkResult VkGetFenceStatus(VkDevice device, VkFence fence);
    public unsafe delegate VkResult VkWaitForFences(VkDevice device, uint fenceCount, VkFence* fences, VkBool32 waitAll, ulong timeout);
    public unsafe delegate VkResult VkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSemaphore semaphore);
    public unsafe delegate void VkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateEvent(VkDevice device, ref VkEventCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkEvent evnt);
    public unsafe delegate void VkDestroyEvent(VkDevice device, VkEvent evt, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkGetEventStatus(VkDevice device, VkEvent evt);
    public unsafe delegate VkResult VkSetEvent(VkDevice device, VkEvent evt);
    public unsafe delegate VkResult VkResetEvent(VkDevice device, VkEvent evt);
    public unsafe delegate VkResult VkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkQueryPool queryPool);
    public unsafe delegate void VkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkGetQueryPoolVkResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, Size dataSize, void* data, VkDeviceSize stride, VkQueryResultFlags flags);
    public unsafe delegate VkResult VkCreateBuffer(VkDevice device, ref VkBufferCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkBuffer buffer);
    public unsafe delegate void VkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkBufferView view);
    public unsafe delegate void VkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateImage(VkDevice device, ref VkImageCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkImage image);
    public unsafe delegate void VkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate void VkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource subresource, out VkSubresourceLayout layout);
    public unsafe delegate VkResult VkCreateImageView(VkDevice device, ref VkImageViewCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkImageView view);
    public unsafe delegate void VkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkShaderModule shaderModule);
    public unsafe delegate void VkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkPipelineCache pipelineCache);
    public unsafe delegate void VkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, out Size dataSize, void* data);
    public unsafe delegate VkResult VkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache* srcCaches);
    public unsafe delegate VkResult VkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkAllocationCallbacks* VkAllocator, VkPipeline* pipelines);
    public unsafe delegate VkResult VkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkAllocationCallbacks* VkAllocator, VkPipeline* pipelines);
    public unsafe delegate void VkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkPipelineLayout pipelineLayout);
    public unsafe delegate void VkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateSampler(VkDevice device, ref VkSamplerCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSampler sampler);
    public unsafe delegate void VkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDescriptorSetLayout setLayout);
    public unsafe delegate void VkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDescriptorPool descriptorPool);
    public unsafe delegate void VkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
    public unsafe delegate VkResult VkVkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo VkAllocateInfo, VkDescriptorSet* descriptorSets);
    public unsafe delegate VkResult VkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* descriptorSets);
    public unsafe delegate void VkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* descriptorCopies);
    public unsafe delegate VkResult VkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkFramebuffer framebuffer);
    public unsafe delegate void VkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkRenderPass renderPass);
    public unsafe delegate void VkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate void VkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity);
    public unsafe delegate VkResult VkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkCommandPool commandPool);
    public unsafe delegate void VkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
    public unsafe delegate VkResult VkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo VkAllocateInfo, VkCommandBuffer* commandBuffers);
    public unsafe delegate void VkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* commandBuffers);
    public unsafe delegate VkResult VkBeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo beginInfo);
    public unsafe delegate VkResult VkEndCommandBuffer(VkCommandBuffer commandBuffer);
    public unsafe delegate VkResult VkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
    public unsafe delegate void VkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
    public unsafe delegate void VkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* viewports);
    public unsafe delegate void VkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* scissors);
    public unsafe delegate void VkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
    public unsafe delegate void VkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasrefantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
    public unsafe delegate void VkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float* blendConstants);
    public unsafe delegate void VkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
    public unsafe delegate void VkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);
    public unsafe delegate void VkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);
    public unsafe delegate void VkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);
    public unsafe delegate void VkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets);
    public unsafe delegate void VkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
    public unsafe delegate void VkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, VkDeviceSize* offsets);
    public unsafe delegate void VkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
    public unsafe delegate void VkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
    public unsafe delegate void VkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
    public unsafe delegate void VkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
    public unsafe delegate void VkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
    public unsafe delegate void VkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
    public unsafe delegate void VkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* regions);
    public unsafe delegate void VkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* regions);
    public unsafe delegate void VkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* regions, VkFilter filter);
    public unsafe delegate void VkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* regions);
    public unsafe delegate void VkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* regions);
    public unsafe delegate void VkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* data);
    public unsafe delegate void VkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data);
    public unsafe delegate void VkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue color, uint rangeCount, VkImageSubresourceRange* ranges);
    public unsafe delegate void VkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue depthStencil, uint rangeCount, VkImageSubresourceRange* ranges);
    public unsafe delegate void VkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* attachments, uint rectCount, VkClearRect* rects);
    public unsafe delegate void VkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* regions);
    public unsafe delegate void VkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent evt, VkPipelineStageFlags stageMask);
    public unsafe delegate void VkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent evt, VkPipelineStageFlags stageMask);
    public unsafe delegate void VkCmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* events, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers);
    public unsafe delegate void VkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers);
    public unsafe delegate void VkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);
    public unsafe delegate void VkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);
    public unsafe delegate void VkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);
    public unsafe delegate void VkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query);
    public unsafe delegate void VkCmdCopyQueryPoolVkResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
    public unsafe delegate void VkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values);
    public unsafe delegate void VkCmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo renderPassBegin, VkSubpassContents contents);
    public unsafe delegate void VkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);
    public unsafe delegate void VkCmdEndRenderPass(VkCommandBuffer commandBuffer);
    public unsafe delegate void VkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* commandBuffers);

    // Khronos
    public unsafe delegate void VkDestroySurfaceKHR(VkInstance instance, VkSurface surface, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurface surface, out VkBool32 supported);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, out VkSurfaceCapabilities surfaceCapabilities);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurface surface, out uint surfaceFormatCount, VkSurfaceFormat* surfaceFormats);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurface surface, out uint presentModeCount, VkPresentMode* presentModes);
    public unsafe delegate VkResult VkCreateSwapchainKHR(VkDevice device, ref VkSwapchainCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSwapchain swapchain);
    public unsafe delegate void VkDestroySwapchainKHR(VkDevice device, VkSwapchain swapchain, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkGetSwapchainImagesKHR(VkDevice device, VkSwapchain swapchain, out uint swapchainImageCount, VkImage* swapchainImages);
    public unsafe delegate VkResult VkAcquireNextImageKHR(VkDevice device, VkSwapchain swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, out uint imageIndex);
    public unsafe delegate VkResult VkQueuePresentKHR(VkQueue queue, ref VkPresentInfo presentInfo);
    public unsafe delegate VkResult VkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, out uint propertyCount, VkDisplayProperties* properties);
    public unsafe delegate VkResult VkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, out uint propertyCount, VkDisplayPlaneProperties* properties);
    public unsafe delegate VkResult VkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, out uint displayCount, VkDisplay* displays);
    public unsafe delegate VkResult VkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplay display, out uint propertyCount, VkDisplayModeProperties* properties);
    public unsafe delegate VkResult VkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplay display, ref VkDisplayModeCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDisplayMode mode);
    public unsafe delegate VkResult VkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayMode mode, uint planeIndex, out VkDisplayPlaneCapabilities capabilities);
    public unsafe delegate VkResult VkCreateDisplayPlaneSurfaceKHR(VkInstance instance, ref VkDisplaySurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkResult VkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfo* createInfos, VkAllocationCallbacks* VkAllocator, VkSwapchain* swapchains);
    public unsafe delegate VkResult VkCreateXlibSurfaceKHR(VkInstance instance, ref VkXlibSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkBool32 GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr dpy, IntPtr visualID);
    public unsafe delegate VkResult VkCreateXcbSurfaceKHR(VkInstance instance, ref VkXcbSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkBool32 GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr connection, IntPtr visualId);
    public unsafe delegate VkResult VkCreateWaylandSurfaceKHR(VkInstance instance, ref VkWaylandSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkBool32 GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr display);
    public unsafe delegate VkResult VkCreateMirSurfaceKHR(VkInstance instance, ref VkMirSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkBool32 GetPhysicalDeviceMirPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, IntPtr connection);
    public unsafe delegate VkResult VkCreateAndroidSurfaceKHR(VkInstance instance, ref VkAndroidSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkResult VkCreateWin32SurfaceKHR(VkInstance instance, ref VkWin32SurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkBool32 GetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex);
    public unsafe delegate void VkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features);
    public unsafe delegate void VkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties);
    public unsafe delegate void VkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties);
    public unsafe delegate VkResult VkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceImageFormatInfo2 imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties);
    public unsafe delegate void VkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, out uint queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties);
    public unsafe delegate void VkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties);
    public unsafe delegate void VkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSparseImageFormatInfo2 formatInfo, out uint propertyCount, VkSparseImageFormatProperties2* properties);
    public unsafe delegate void VkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
    public unsafe delegate void VkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalBufferInfo externalBufferInfo, out VkExternalBufferProperties externalBufferProperties);
    public unsafe delegate VkResult VkGetMemoryWin32HandleKHR(VkDevice device, ref VkMemoryGetWin32HandleInfo getWin32HandleInfo, IntPtr handle);
    public unsafe delegate VkResult VkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, IntPtr handle, out VkMemoryWin32HandleProperties memoryWin32HandleProperties);
    public unsafe delegate VkResult VkGetMemoryFdKHR(VkDevice device, ref VkMemoryGetFdInfo getFdInfo, out int fd);
    public unsafe delegate VkResult VkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, out VkMemoryFdProperties pMemoryFdProperties);
    public unsafe delegate void VkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties);
    public unsafe delegate VkResult VkImportSemaphoreWin32HandleKHR(VkDevice device, ref VkImportSemaphoreWin32HandleInfo importSemaphoreWin32HandleInfo);
    public unsafe delegate VkResult VkGetSemaphoreWin32HandleKHR(VkDevice device, ref VkSemaphoreGetWin32HandleInfo getWin32HandleInfo, IntPtr handle);
    public unsafe delegate VkResult VkImportSemaphoreFdKHR(VkDevice device, ref VkImportSemaphoreFdInfo importSemaphoreFdInfo);
    public unsafe delegate VkResult VkGetSemaphoreFdKHR(VkDevice device, ref VkSemaphoreGetFdInfo getFdInfo, out int fd);
    public unsafe delegate void VkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites);
    public unsafe delegate VkResult VkCreateDescriptorUpdateTemplateKHR(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate);
    public unsafe delegate void VkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate void VkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data);
    public unsafe delegate void VkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data);
    public unsafe delegate VkResult VkGetSwapchainStatusKHR(VkDevice device, VkSwapchain swapchain);
    public unsafe delegate void VkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceExternalFenceInfo externalFenceInfo, out VkExternalFenceProperties externalFenceProperties);
    public unsafe delegate VkResult VkImportFenceWin32HandleKHR(VkDevice device, ref VkImportFenceWin32HandleInfo importFenceWin32HandleInfo);
    public unsafe delegate VkResult VkGetFenceWin32HandleKHR(VkDevice device, ref VkFenceGetWin32HandleInfo getWin32HandleInfo, IntPtr pHandle);
    public unsafe delegate VkResult VkImportFenceFdKHR(VkDevice device, ref VkImportFenceFdInfo importFenceFdInfo);
    public unsafe delegate VkResult VkGetFenceFdKHR(VkDevice device, ref VkFenceGetFdInfo getFdInfo, out int fd);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, out VkSurfaceCapabilities2 surfaceCapabilities);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, ref VkPhysicalDeviceSurfaceInfo2 surfaceInfo, out uint surfaceFormatCount, VkSurfaceFormat2* surfaceFormats);
    public unsafe delegate void VkGetImageMemoryRequirements2KHR(VkDevice device, ref VkImageMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements);
    public unsafe delegate void VkGetBufferMemoryRequirements2KHR(VkDevice device, ref VkBufferMemoryRequirementsInfo2 info, out VkMemoryRequirements2 memoryRequirements);
    public unsafe delegate void VkGetImageSparseMemoryRequirements2KHR(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements);

    // Khronos X
    public unsafe delegate void VkGetDeviceGroupPeerMemoryFeaturesKHX(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures);
    public unsafe delegate VkResult VkBindBufferMemory2KHX(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos);
    public unsafe delegate VkResult VkBindImageMemory2KHX(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos);
    public unsafe delegate void VkCmdSetDeviceMaskKHX(VkCommandBuffer commandBuffer, uint deviceMask);
    public unsafe delegate VkResult VkGetDeviceGroupPresentCapabilitiesKHX(VkDevice device, out VkDeviceGroupPresentCapabilities deviceGroupPresentCapabilities);
    public unsafe delegate VkResult VkGetDeviceGroupSurfacePresentModesKHX(VkDevice device, VkSurface surface, out VkDeviceGroupPresentModeFlags modes);
    public unsafe delegate VkResult VkAcquireNextImage2KHX(VkDevice device, ref VkAcquireNextImageInfo acquireInfo, out uint imageIndex);
    public unsafe delegate void VkCmdDispatchBaseKHX(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
    public unsafe delegate VkResult VkGetPhysicalDevicePresentRectanglesKHX(VkPhysicalDevice physicalDevice, VkSurface surface, ref uint rectCount, VkRect2D* rects);
    public unsafe delegate VkResult VkEnumeratePhysicalDeviceGroupsKHX(VkInstance instance, ref uint physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties);

    // Multi-vendor
    public unsafe delegate VkBool32 DebugReportCallbackEXT(VkDebugReportFlags flags, VkDebugReportObjectType objectType, ulong objectHandle, Size location, int messageCode, byte* layerPrefix, byte* message, IntPtr userData);
    public unsafe delegate VkResult VkCreateDebugReportCallbackEXT(VkInstance instance, ref VkDebugReportCallbackCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkDebugReportCallback callback);
    public unsafe delegate void VkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallback callback, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate void VkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlags flags, VkDebugReportObjectType objectType, ulong obj, Size location, int messageCode, byte* layerPrefix, byte* message);
    public unsafe delegate VkResult VkDebugMarkerSetObjectTagEXT(VkDevice device, ref VkDebugMarkerObjectTagInfo tagInfo);
    public unsafe delegate VkResult VkDebugMarkerSetObjectNameEXT(VkDevice device, ref VkDebugMarkerObjectNameInfo nameInfo);
    public unsafe delegate void VkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo);
    public unsafe delegate void VkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer);
    public unsafe delegate void VkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, ref VkDebugMarkerMarkerInfo markerInfo);
    public unsafe delegate VkResult VkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplay display);
    public unsafe delegate VkResult VkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, IntPtr dpy, VkDisplay display);
    public unsafe delegate VkResult VkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, IntPtr dpy, IntPtr rrOutput, out VkDisplay display);
    public unsafe delegate VkResult VkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurface surface, out VkSurfaceCapabilities2EXT surfaceCapabilities);
    public unsafe delegate VkResult VkDisplayPowerControlEXT(VkDevice device, VkDisplay display, ref VkDisplayPowerInfo displayPowerInfo);
    public unsafe delegate VkResult VkRegisterDeviceEventEXT(VkDevice device, ref VkDeviceEventInfo deviceEventInfo, VkAllocationCallbacks* VkAllocator, out VkFence fence);
    public unsafe delegate VkResult VkRegisterDisplayEventEXT(VkDevice device, VkDisplay display, ref VkDisplayEventInfo displayEventInfo, VkAllocationCallbacks* VkAllocator, out VkFence fence);
    public unsafe delegate VkResult VkGetSwapchainCounterEXT(VkDevice device, VkSwapchain swapchain, VkSurfaceCounterFlags counter, out ulong counterValue);
    public unsafe delegate void VkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* discardRectangles);
    public unsafe delegate void VkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchain* swapchains, VkHdrMetadata* metadata);

    // AMD
    public unsafe delegate void VkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
    public unsafe delegate void VkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    // Nvidia
    public unsafe delegate VkResult VkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV ExternalHandleType, out VkExternalImageFormatPropertiesNV externalImageFormatProperties);
    public unsafe delegate VkResult VkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, IntPtr handle);
    public unsafe delegate void VkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScaling* viewportWScalings);

    // Nvidia X
    public unsafe delegate void VkCmdProcessCommandsNVX(VkCommandBuffer commandBuffer, ref VkCmdProcessCommandsInfo processCommandsInfo);
    public unsafe delegate void VkCmdReserveSpaceForCommandsNVX(VkCommandBuffer commandBuffer, ref VkCmdReserveSpaceForCommandsInfo reserveSpaceInfo);
    public unsafe delegate VkResult VkCreateIndirectCommandsLayoutNVX(VkDevice device, ref VkIndirectCommandsLayoutCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkIndirectCommandsLayout indirectCommandsLayout);
    public unsafe delegate void VkDestroyIndirectCommandsLayoutNVX(VkDevice device, VkIndirectCommandsLayout indirectCommandsLayout, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkCreateObjectTableNVX(VkDevice device, ref VkObjectTableCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkObjectTable objectTable);
    public unsafe delegate void VkDestroyObjectTableNVX(VkDevice device, VkObjectTable objectTable, VkAllocationCallbacks* VkAllocator);
    public unsafe delegate VkResult VkRegisterObjectsNVX(VkDevice device, VkObjectTable objectTable, uint objectCount, ref VkObjectTableEntry* objectTableEntries, uint* objectIndices);
    public unsafe delegate VkResult VkUnregisterObjectsNVX(VkDevice device, VkObjectTable objectTable, uint objectCount, VkObjectEntryType* objectEntryTypes, uint* objectIndices);
    public unsafe delegate void VkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice physicalDevice, out VkDeviceGeneratedCommandsFeatures features, out VkDeviceGeneratedCommandsLimits limits);

    // Nintendo
    public unsafe delegate VkResult VkCreateViSurfaceNN(VkInstance instance, ref VkViSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);

    // Google
    public unsafe delegate VkResult VkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchain swapchain, ref VkRefreshCycleDuration displayTimingProperties);
    public unsafe delegate VkResult VkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchain swapchain, ref uint presentationTimingCount, VkPastPresentationTiming* presentationTimings);

    // MoltenVK
    public unsafe delegate VkResult VkCreateIOSSurfaceMVK(VkInstance instance, ref VkIOSSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
    public unsafe delegate VkResult VkCreateMacOSSurfaceMVK(VkInstance instance, ref VkMacOSSurfaceCreateInfo createInfo, VkAllocationCallbacks* VkAllocator, out VkSurface surface);
}